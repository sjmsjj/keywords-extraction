graphical games have been proposed as a game-theoretic model of
large-scale distributed networks of non-cooperative agents. when
the number of players is large, and the underlying graph has low
degree, they provide a concise way to represent the players" 
payoffs. it has recently been shown that the problem of finding nash
equilibria in a general degree-3 graphical game with two actions
per player is complete for the complexity class ppad, indicating
that it is unlikely that there is any polynomial-time algorithm for
this problem. in this paper, we study the complexity of graphical
games with two actions per player on bounded-degree trees. this
setting was first considered by kearns, littman and singh, who 
proposed a dynamic programming-based algorithm that computes all
nash equilibria of such games. the running time of their algorithm
is exponential, though approximate equilibria can be computed 
efficiently. later, littman, kearns and singh proposed a modification
to this algorithm that can find a single nash equilibrium in 
polynomial time. we show that this modified algorithm is incorrect - the
output is not always a nash equilibrium. we then propose a new
algorithm that is based on the ideas of kearns et al. and computes
all nash equilibria in quadratic time if the input graph is a path, and
in polynomial time if it is an arbitrary graph of maximum degree 2.
moreover, our algorithm can be used to compute nash equilibria
of graphical games on arbitrary trees, but the running time can be
exponential, even when the tree has bounded degree. we show that
this is inevitable - any algorithm of this type will take 
exponential time, even on bounded-degree trees with pathwidth 2. it is an
open question whether our algorithm runs in polynomial time on
graphs with pathwidth 1, but we show that finding a nash 
equilibrium for a 2-action graphical game in which the underlying graph
has maximum degree 3 and constant pathwidth is ppad-complete
(so is unlikely to be tractable).
